name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.24.4']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest'
      run: |
        go tool cover -html=coverage.txt -o coverage.html
        go tool cover -func=coverage.txt
    
    - name: Upload coverage report
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html
    
    - name: Check test coverage
      if: matrix.os == 'ubuntu-latest'
      run: |
        COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: $COVERAGE%"
        # Fail if coverage is below 70%
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "Coverage is below 70%"
          exit 1
        fi

  benchmark:
    name: Run Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
    
    - name: Run benchmarks
      run: go test -bench=. -benchmem ./pkg/transform/...
    
    - name: Save benchmark results
      run: |
        go test -bench=. -benchmem ./pkg/transform/... > benchmark_results.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark_results.txt

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
    
    - name: Build CLI
      run: |
        go build -v -o imagekit cmd/imagekit/main.go
        ./imagekit --version
    
    - name: Build WASM
      run: |
        make build-wasm
        ls -la web/static/imagekit.wasm
    
    - name: Upload CLI binary
      uses: actions/upload-artifact@v4
      with:
        name: imagekit-cli
        path: imagekit
    
    - name: Upload WASM binary
      uses: actions/upload-artifact@v4
      with:
        name: imagekit-wasm
        path: web/static/imagekit.wasm